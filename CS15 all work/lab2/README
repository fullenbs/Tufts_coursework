/*
 * Comp 15 Lab 2: Planets
 *
 * README
 * Author: Hayden Wolff, edited by Elizabeth Hom (Sept 2020)
 *         Updated by Matt R - Feb, 2021
 * Name: Scott Fullenbaum
 * Date: 2/1/2022
 * 
 * Note: This is an example README file
 */

PROGRAM PURPOSE:
---------------
    This lab assignment offers Comp 15 students with hands on practice
    with linked lists. Specifically, this program implements a singly 
    linked list of Planet objects.

ACKNOWLEDGEMENTS:
----------------
    I looked at my old CS11 notes along with my CS15 notes to help me remember 
    Linked Lists.

FILES:
-----

   planet-driver.cpp: Main driver for the linked list of planets.
        Reads in planets from cin, before adding them to two lists. Also 
        has space for a JFFE that reverses the first list. 
          ** STUDENT TODO: Insert planets to two lists - one by pushAtFront, the
          other by pushAtBack. Then, implement the destructor. 

    LinkedList.cpp: Implementation of the LinkedList class which includes
        key functions regarding the linked list, such as the default and
        parametrized constructor, assignment operator, print function, 
        other helper functions.
          ** STUDENT TODO: Write pushAtFront, pushAtBack, and the destructor.

    LinkedList.h: Interface of LinkedList class, which includes key information
        regarding the LinkedList class.

    Planet.cpp: Implementation of Planet class which includes a default and
        parametrized constructor which creates Planet objects, a print
        function, and assignment operator.

    Planet.h: Interface of Planet class, which includes key information
        regarding Planet objects.


HOW TO COMPILE/LINK/RUN:
-----------------------
    * Compile with "make planet-driver"
    * Run with "./planet-driver"

    * Note: The student must implement two functions: pushAtFront
            and pushAtBack.

DATA STRUCTURES:
---------------

    The main data structure of this lab is a singly linked list. Inserting
    at the front of a linked list is O(1). Inserting at the back is
    O(list_length) (or O(1) if there is a back pointer). Access is O(n),
    because the worst case run time is if the element that is being looked
    for is the last element in the list.  A linked list is useful because it
    can be used dynamically and it is relatively easy to insert and delete
    nodes. A disadvantage of linked lists is that it is difficult to access
    elements quickly, as you cannot directly access elements like with an array
    and must traverse the list to access elements.

TESTING:
-------
    My main testing strategy was running my code through Valgrind a lot. I had 
    a lot of segfaults, and used Valgrind to figure out where they were so that 
    I could fix them. A lot of my issues came down to me using the incorrect 
    pointer.

Style guide quiz:
1) When a unit_test would crash your code
2) Inline comments are used to explain what your code does, any bugs, 
3) 30 lines
4) Use the key words and, or, and not versus &&, ||, !=
5) Only inside a switch 
6) The column limit is 80 
